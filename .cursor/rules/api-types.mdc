# API 개발 및 타입 관리 가이드

## 🔗 API 연동 아키텍처

### 백엔드 ↔ 프론트엔드 타입 동기화
백엔드와 프론트엔드 간 타입은 다음과 같이 동기화합니다:

**백엔드 타입**: [backend/src/common/interfaces/](mdc:backend/src/common/interfaces/)
**프론트엔드 타입**: [frontend/src/types/index.ts](mdc:frontend/src/types/index.ts)

### 주요 타입 정의

#### 얼굴형 분석 결과
```typescript
export interface FaceAnalysisResult {
  faceShape: 'oval' | 'round' | 'oblong' | 'square' | 'heart' | 'inverted_triangle';
  description: string;
  confidence: number;  // 0.0 ~ 1.0
  landmarks?: any[];   // MediaPipe 연동 후 사용
}
```

#### 헤어스타일 추천
```typescript
export interface HairStyleRecommendation {
  id: string;
  name: string;
  description: string;
  imageUrl: string;
  celebrity: {
    name: string;
    imageUrl: string;
  };
  tags: string[];
}
```

## 📡 API 엔드포인트 규격

### 얼굴형 분석 API
```typescript
// POST /face-analysis/analyze
interface AnalyzeRequest {
  image: File  // multipart/form-data
}

interface AnalyzeResponse extends FaceAnalysisResult {}
```

### 헤어스타일 추천 API
```typescript
// GET /recommendations/hair-styles
interface RecommendationRequest {
  faceShape: FaceShapeType;
  gender: 'male' | 'female';
}

interface RecommendationResponse {
  recommendations: HairStyleRecommendation[];
  totalCount: number;
}
```

## 🛠️ API 클라이언트 사용법

### API 서비스 ([api.ts](mdc:frontend/src/services/api.ts))
```typescript
// 얼굴 분석
const analysisResult = await faceAnalysisApi.analyzeFace(imageFile);

// 헤어스타일 추천
const recommendations = await recommendationApi.getHairStyleRecommendations(
  'heart',
  'female'
);

// 연예인 레퍼런스
const celebrities = await recommendationApi.getCelebrityReferences(styleId);
```

### 에러 처리
```typescript
try {
  const result = await faceAnalysisApi.analyzeFace(imageFile);
  // 성공 처리
} catch (error) {
  console.error('API 에러:', error);
  // 사용자에게 적절한 에러 메시지 표시
  alert('얼굴형 분석에 실패했습니다. 다시 시도해주세요.');
}
```

## 🗂️ 데이터 구조

### 얼굴형별 추천 데이터 구조
```typescript
// backend/src/recommendation/recommendation.service.ts
private readonly hairStyleData = {
  heart: {
    male: [
      {
        id: 'heart-m-1',
        name: '사이드 파트 스타일',
        description: '옆으로 나눈 헤어로 이마를 적당히 가려주는 스타일',
        celebrity: { name: '박보검', imageUrl: '/images/celebrities/park-bogum.jpg' },
        tags: ['사이드파트', '클래식', '깔끔']
      }
    ],
    female: [/* 여성용 스타일들 */]
  },
  // 다른 얼굴형들...
}
```

### 애플리케이션 상태 관리
```typescript
// 페이지 간 데이터 전달을 위한 상태 타입
export interface AppState {
  gender: GenderType | null;
  selectedImage: File | null;
  imagePreview: string | null;
  analysisResult: FaceAnalysisResult | null;
  recommendations: HairStyleRecommendation[];
}
```

## 🔧 환경 설정

### API URL 설정
```typescript
// frontend/src/services/api.ts
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001'
```

### 환경변수
```bash
# backend/.env
PORT=3001
NODE_ENV=development

# frontend/.env  
VITE_API_URL=http://localhost:3001
```

## ⚠️ 개발 시 주의사항
- 타입 변경 시 백엔드와 프론트엔드 모두 업데이트 필요
- API 응답 형식 변경 시 양쪽 코드 동기화 확인
- 파일 업로드는 5MB 제한 (백엔드 설정)
- 개발환경에서는 CORS 허용되지만 프로덕션에서는 도메인 제한 필요
